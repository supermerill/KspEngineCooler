// Changes to stock parts to add engine cooler config
//
// Powered by ialdabaoth and sarbian's ModuleManager

@PART[*]:HAS[@MODULE[ModuleEngine*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]]:FOR[EngineCooler]
{
	//heatConvectiveConstant = 2 //conductivity to air, default is 1
	%maxTemp = 2000
	%heatConductivity = 0.001 // remove conductivity to adjacent part.
	//try to "remove" conductivity to ensure "robust" behaviour
	%skinSkinConductionMult = 0.001
	%skinInternalConductionMult = 0.001
	//%heatConvectiveConstant = 0.1 //keep some convection, it's not very important.
	%emissiveConstant = 0.001 // almost disable radiation, it's redone inside the EngineHeaterCoolerModule
	%thermalMassModifier  = 1
	@MODULE[ModuleEngine*]
	{
		//heat is now generated via EngineHeaterCoolerModule
		@heatProduction = 0
	}
	MODULE
	{
		name = EngineHeaterCoolerModule
		
		// custom simple heater, more or less like the stock system.
		degreePerSecond = 50 // default: 20. Number of centigrade added by second to the skin when fuel flow is 100%.
		
		//radiative cooling
		radiativeEfficiency = 0.8 // throttle needed to not overheat
		
		//abative coating: simpler simulated ablation, like the stock behaviour.
		// when using, it set the emissiveConstant to 0.01 (as it's an insulator, and it's easier to tune)
		nbAblatorPerThrust = 1 // increase this to increase mass enalty
		ablatorPyrolysisLossFactor = 190 // temperature captured by an emmision of a % of ablator// 250 = 2min (+50s free)
		ablatorLossConst = 0.01 // mult for ablator use
		ablatorMinTemp = 1000 // temp when ablator start being consumed
		techAblator = generalRocketry // default value : null (available from start)
		
		// regenerative cooling: can't pass 1500Â°C (asymptote)
		costRegenerativePercent = 75 // default value : 50 => cost *= 1.5
		techRegenerative = propulsionSystems // default value : null (available from start)
	}
}

// OLD CONF, not enough reliablility with squad system.
// @PART[*]:HAS[@MODULE[ModuleEngine*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]]:FOR[EngineCooler]
// {
	// //heatConvectiveConstant = 2 //conductivity to air, default is 1
	// %maxTemp = 2000
	// %heatConductivity = 0.001 // remove conductivity to adjacent part. It's stupid the engine's fuel tank.
	// @skinInternalConductionMult = 1000000.0 // skin temp ~= internal temp (engine increse internal temp, ablator reduce skin temp)
	// @MODULE[ModuleEngine*]
	// {
		// // no need of scaling for heat production
		// // it's roughly a FL-T800 for a lvt-30 / 45
		// @heatProduction = 1300 
		
		// // playing with numbers
		// //@heatProduction = #$/mass$
		// //@heatProduction *= 30 
	// }
	// MODULE
	// {
		// name = EngineCoolerModule
		// nbAblator = #$/mass$
		// @nbAblator *= 200 //ablator quantity is linked to the mass of the part
		// techAblator = generalRocketry // default value : null (available from start)
		// costRegenerativePercent = 50 // default value : 50 => cost *= 1.5
		// regenerativeHeat = 192 // default value : 192
		// techRegenerative = propulsionSystems // default value : null (available from start)
		// MODULE
		// {
			// name = ModuleAblator
			// ablativeResource = Ablator
			// lossExp = -10000 //reduce this to use ablator faster (flater max temp)
			// lossConst = 20 
			// pyrolysisLossFactor = 700 // improve this to make ablator last longer
			// reentryConductivity = 0.001
			// ablationTempThresh = 1000 //it began to ablate at 1000
		// }
	// }
// }
